{"name":"Bezier","tagline":"A JavaScript-only bezier implementation with good performance.","body":"#bezier.js\r\n##introduction\r\n`bezier.js`,is a fast and light-weight implementation of bezier curve in pure JavaScript.\r\n\r\n**size**: `~4kb` unminified, `~2kb` minified.   \r\n**performance**: near native implementation(or even greater)   \r\n**controllable**: full controllable   \r\n**usable range**: all nth order bezier curves, and even some curves like 6th order the x coords but 8th order the y coords.   \r\n**transparency**: you can see every result of computing, nothing is hidden\r\n##inside\r\nBezier curves can be implemented like parametric plotting, and the plotting function is controlled by the control points. `bezier.js` does all of this for you, with everything transparent. We compile a curve into two high-performance javascript functions,one is x and the other is y, then call them every time with a specified value `t` as parameter, and get `x` value and `y` value. Then we get these points, and plot them on the canvas.\r\n##usage\r\n###dependencies\r\nWithout any dependencies.\r\n###support\r\nWith any browsers that supports canvas.   \r\nBut only to use some utilities like calculating, canvas support is not required.\r\n###including\r\n```html\r\n<!-- assume bezier.js is at the same directory of your html file -->\r\n<script src=\"bezier.js\"></script>\r\n<!-- note: minified version at bezier.min.js -->\r\n```\r\n###basic usage\r\n```javascript\r\n//assume `cvs` is your canvas's id\r\nvar ctx=cvs.getContext(\"2d\");\r\nctx.beginPath();\r\nbezier.draw(ctx,[10,30,170,120,10],[40,13,89,240,40],20);\r\n//draw on ctx^   ^x coords of ctrl points ^y coords   ^number of values to interpolate, bigger is smoother\r\nctx.stroke();//bezier will not call stroke automacally\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}